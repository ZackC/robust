diff --git a/geometry2/README.bug_witness b/geometry2/README.bug_witness
new file mode 100644
index 0000000..bf76833
--- /dev/null
+++ b/geometry2/README.bug_witness
@@ -0,0 +1,12 @@
+Repository where this bug witness patch is developed:
+https://github.com/wasowski/geometry2_167
+
+The idea: start the node with wrong and good parameters in
+parallel with a dummy test that always passes. Then the success of
+the rostest only depends on whether the nodes have crashed or not.
+Use launch-prefix to inspect whether a node test because of
+(expected) parameter validation, or because an assertion failed.
+
+The assertions are inserted by redefining ROS_FATAL for the file
+in question (otherwise we would need to change the file, and the
+fixing commit would either not pass the test, or would not apply).
diff --git a/geometry2/tf2_ros/CMakeLists.txt b/geometry2/tf2_ros/CMakeLists.txt
index bfd0be5..00b052d 100644
--- a/geometry2/tf2_ros/CMakeLists.txt
+++ b/geometry2/tf2_ros/CMakeLists.txt
@@ -46,6 +46,7 @@ add_library(${PROJECT_NAME}
   src/buffer_server.cpp
   src/transform_broadcaster.cpp
   src/static_transform_broadcaster.cpp
+  test/bug_witness.cpp
 )
 add_dependencies(${PROJECT_NAME} tf2_msgs_gencpp)
 target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES})
@@ -114,6 +115,7 @@ add_executable(${PROJECT_NAME}_test_listener EXCLUDE_FROM_ALL test/listener_unit
 add_dependencies(${PROJECT_NAME}_test_listener tf2_msgs_gencpp)
 add_executable(${PROJECT_NAME}_test_time_reset EXCLUDE_FROM_ALL test/time_reset_test.cpp)
 add_dependencies(${PROJECT_NAME}_test_time_reset tf2_msgs_gencpp)
+add_executable(${PROJECT_NAME}_dummy_test EXCLUDE_FROM_ALL test/dummy_test.cpp)
 target_link_libraries(${PROJECT_NAME}_test_listener
   ${PROJECT_NAME}
   ${catkin_LIBRARIES}
@@ -126,10 +128,19 @@ target_link_libraries(${PROJECT_NAME}_test_time_reset
   ${GTEST_LIBRARIES}
 )
 
+target_link_libraries(${PROJECT_NAME}_dummy_test
+  ${PROJECT_NAME}
+  ${catkin_LIBRARIES}
+  ${GTEST_LIBRARIES}
+)
+
 add_dependencies(tests ${PROJECT_NAME}_test_listener)
 add_dependencies(tests ${PROJECT_NAME}_test_time_reset)
+add_dependencies(tests ${PROJECT_NAME}_static_transform_publisher)
+add_dependencies(tests ${PROJECT_NAME}_dummy_test)
 
 add_rostest(test/transform_listener_unittest.launch)
 add_rostest(test/transform_listener_time_reset_test.launch)
+add_rostest(test/bug_witness.test)
 
 endif()
diff --git a/geometry2/tf2_ros/include/tf2_ros/bug_witness.h b/geometry2/tf2_ros/include/tf2_ros/bug_witness.h
new file mode 100644
index 0000000..30bc239
--- /dev/null
+++ b/geometry2/tf2_ros/include/tf2_ros/bug_witness.h
@@ -0,0 +1,12 @@
+namespace bug_witness {
+
+  void validate (char ** argv, ...);
+
+} 
+
+// Redefine ROS_FATAL to intercept the problem
+#undef ROS_FATAL
+#define ROS_FATAL(...) {\
+  bug_witness::validate(argv, __VA_ARGS__);\
+  ROS_LOG(::ros::console::levels::Fatal, ROSCONSOLE_DEFAULT_NAME, __VA_ARGS__); \
+}
diff --git a/geometry2/tf2_ros/src/static_transform_broadcaster_program.cpp b/geometry2/tf2_ros/src/static_transform_broadcaster_program.cpp
index e9ec9c3..23e1ffd 100644
--- a/geometry2/tf2_ros/src/static_transform_broadcaster_program.cpp
+++ b/geometry2/tf2_ros/src/static_transform_broadcaster_program.cpp
@@ -31,6 +31,8 @@
 #include <tf2/LinearMath/Quaternion.h>
 #include "tf2_ros/static_transform_broadcaster.h"
 
+#include "tf2_ros/bug_witness.h"
+
 int main(int argc, char ** argv)
 {
   //Initialize ROS
diff --git a/geometry2/tf2_ros/test/bug_witness.cpp b/geometry2/tf2_ros/test/bug_witness.cpp
new file mode 100644
index 0000000..1201954
--- /dev/null
+++ b/geometry2/tf2_ros/test/bug_witness.cpp
@@ -0,0 +1,27 @@
+#include <cstdio>
+#include "ros/ros.h"
+
+namespace bug_witness {
+
+  void validate (char ** argv, ...)
+  {
+    // Only works for this file at this time (three arguments in both call sites)
+    va_list valist;
+    #pragma GCC diagnostic ignored "-Wvarargs"
+    va_start(valist, 3); 
+    // Skip the format string
+    va_arg(valist, const char *);
+    const char * s1 = va_arg(valist, const char *);
+    const char * s2 = va_arg(valist, const char *);
+
+    // The only case in which ROS_FATAL is called in this file:
+    ROS_ASSERT_MSG (strcmp (s1,s2) == 0, "I expected '%s' and '%s' be the same", s1, s2);
+    // Never fails as rostest adds parameters:
+    ROS_ASSERT (s2 != NULL); 
+    // luckily works in both cases, once we asserted the above:
+    ROS_ASSERT (strcmp (s2,argv[8]) == 0); 
+
+    va_end(valist);
+  }
+
+}
diff --git a/geometry2/tf2_ros/test/bug_witness.sh b/geometry2/tf2_ros/test/bug_witness.sh
new file mode 100755
index 0000000..35400f3
--- /dev/null
+++ b/geometry2/tf2_ros/test/bug_witness.sh
@@ -0,0 +1,10 @@
+#!/bin/sh
+
+echo Starting: $*
+$*
+exit_status=$?
+if [ ${exit_status} -eq 1 ]; then
+  # sleep so that the dummy test can complete safely and kill us
+  sleep 20s
+fi
+exit ${exit_status}
diff --git a/geometry2/tf2_ros/test/bug_witness.test b/geometry2/tf2_ros/test/bug_witness.test
new file mode 100644
index 0000000..40787b3
--- /dev/null
+++ b/geometry2/tf2_ros/test/bug_witness.test
@@ -0,0 +1,20 @@
+<launch>
+ <node name="static_transform_publisher1" pkg="tf2_ros" 
+       type="static_transform_publisher" 
+       args="1 2 3 4 5 6 a 7" 
+       required="true" output="screen"/>
+ <node name="static_transform_publisher2" pkg="tf2_ros" 
+       type="static_transform_publisher" 
+       args="1 2 3 4 5 6 7 8 9" 
+       required="true" output="screen"/>
+ <node name="static_transform_publisher3" pkg="tf2_ros" 
+       type="static_transform_publisher" args="1 2 3 4 5 6 7 8 8" 
+       required="true" output="screen"
+       launch-prefix="$(find tf2_ros)/test/bug_witness.sh"/>
+ <node name="static_transform_publisher4" pkg="tf2_ros" 
+       type="static_transform_publisher" args="1 2 3 4 5 6 7 7" 
+       required="true" output="screen"
+       launch-prefix="$(find tf2_ros)/test/bug_witness.sh"/>
+ <test test-name="witness_b4dc23c" pkg="tf2_ros" 
+       type="tf2_ros_dummy_test"/>
+</launch>
diff --git a/geometry2/tf2_ros/test/dummy_test.cpp b/geometry2/tf2_ros/test/dummy_test.cpp
new file mode 100644
index 0000000..540275f
--- /dev/null
+++ b/geometry2/tf2_ros/test/dummy_test.cpp
@@ -0,0 +1,10 @@
+#include <gtest/gtest.h>
+
+TEST(tf2_ros, dummytest){
+  EXPECT_TRUE(true);
+}
+
+int main(int argc, char** argv){
+  testing::InitGoogleTest(&argc, argv);
+  return RUN_ALL_TESTS();
+}
